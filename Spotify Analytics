# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL.

#First I determine the average danceability, popularity and energy by artist and track.
SELECT artist_name, 
track_name,
AVG (danceability),
AVG (popularity),
AVG (energy)
FROM Spotifydata
GROUP BY artist_name, track_name;

#Next I determine the top 10 artists based on popularity.
SELECT artist_name, popularity
FROM Spotifydata
WHERE popularity > 88
LIMIT 10;

#Then the artist who had the most popular song with the longest duration.
SELECT artist_name, MAX(duration_ms) AS song_duration, 
MAX(popularity) AS top_popularity
FROM Spotifydata
ORDER BY top_popularity
AND song_duration;

#Theb the 5 songs most dancible songs.
SELECT artist_name, track_name, ROUND(danceability*100) AS dance_rating
FROM Spotifydata
WHERE dance_rating >= 80
ORDER BY dance_rating desc
LIMIT 5;

#And lastly, the songs most likely to get the croud ampted up.
SELECT track_name, energy, liveness, popularity
FROM Spotifydata
WHERE popularity >= 80
AND energy >= 0.600
AND liveness >=0.200
ORDER BY energy desc;
